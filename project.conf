-- Definiere die gemeinsamen VMArgs
local javafx_path = "lib/openjfx-23.0.2_osx-aarch64_bin-sdk/javafx-sdk-23.0.2/lib"
local vmargs = {
	"--module-path",
	javafx_path,
	"--add-modules",
	"javafx.controls,javafx.fxml,javafx.media,javafx.graphics",
}

local project_name = vim.fn.fnamemodify(vim.fn.getcwd(), ":p:h:t")

local workspace_dir = "~/workspace/" .. project_name

-- See `:help vim.lsp.start_client` for an overview of the supported `config` options.
local config = {
	-- The command that starts the language server
	-- See: https://github.com/eclipse/eclipse.jdt.ls#running-from-the-command-line
	cmd = {

		-- ðŸ’€
		"/opt/homebrew/opt/openjdk@23/bin/java",
		-- depends on if `java` is in your $PATH env variable and if it points to the right version.

		"-Declipse.application=org.eclipse.jdt.ls.core.id1",
		"-Dosgi.bundles.defaultStartLevel=4",
		"-Declipse.product=org.eclipse.jdt.ls.core.product",
		"-Dlog.protocol=true",
		"-Dlog.level=ALL",
		"-Xmx1g",
		"--add-modules=ALL-SYSTEM",
		"--add-opens",
		"java.base/java.util=ALL-UNNAMED",
		"--add-opens",
		"java.base/java.lang=ALL-UNNAMED",

		-- ðŸ’€
		"-jar",
		"/Users/marcusvaitschulis/.local/share/nvim/mason/packages/jdtls/plugins/org.eclipse.equinox.launcher.cocoa.macosx.aarch64_1.2.1100.v20240722-2106.jar",
		-- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^
		-- Must point to the                                                     Change this to
		-- eclipse.jdt.ls installation                                           the actual version

		-- ðŸ’€
		"-configuration",
		"/Users/marcusvaitschulis/.local/share/nvim/mason/packages/jdtls/config_mac",
		-- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^^^^^
		-- Must point to the                      Change to one of `linux`, `win` or `mac`
		-- eclipse.jdt.ls installation            Depending on your system.

		-- ðŸ’€
		-- See `data directory configuration` section in the README
		"-data",
		workspace_dir,
	},

	-- ðŸ’€
	-- This is the default if not provided, you can remove it. Or adjust as needed.
	-- One dedicated LSP server & client will be started per unique root_dir
	--
	-- vim.fs.root requires Neovim 0.10.
	-- If you're using an earlier version, use: require('jdtls.setup').find_root({'.git', 'mvnw', 'gradlew'}),
	root_dir = vim.fs.root(0, { ".git", "mvnw", "gradlew" }),

	-- Here you can configure eclipse.jdt.ls specific settings
	-- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request
	-- for a list of options
	-- settings = {
	--   java = {
	--   }
	-- },
	--
	-- Language server `initializationOptions`
	-- You need to extend the `bundles` with paths to jar files
	-- if you want to use additional eclipse.jdt.ls plugins.
	--
	-- See https://github.com/mfussenegger/nvim-jdtls#java-debug-installation
	--
	-- If you don't plan on using the debugger or other eclipse.jdt.ls plugins you can remove this
	-- init_options = {
	--   bundles = {}
	-- },
}
-- This starts a new client & server,
-- or attaches to an existing client & server depending on the `root_dir`.
require("jdtls").start_or_attach(config)

-- DAP Konfiguration
local dap = require("dap")

dap.configurations.java = {
	{
		type = "java",
		request = "launch",
		name = "Launch Java Program",
		-- Hauptklasse deiner Anwendung
		mainClass = "${file}", -- oder deine spezifische Hauptklasse
		projectName = "${workspaceFolder}",
		-- VMArgs fÃ¼r JavaFX
		vmArgs = table.concat(vmargs, " "),
		-- Optional: Weitere Konfigurationen
		sourcePaths = {
			"${workspaceFolder}/src/main/java",
		},
		classPaths = {
			"${workspaceFolder}/target/classes",
			javafx_path .. "/*", -- FÃ¼gt alle JavaFX JARs zum Classpath hinzu
		},
	},
}

-- Optional: FÃ¼ge Debug-Keybindings hinzu
vim.keymap.set("n", "<leader>db", function()
	require("dap").toggle_breakpoint()
end)
vim.keymap.set("n", "<leader>dc", function()
	require("dap").continue()
end)
